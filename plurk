#!/usr/bin/env python

import sys, json, re, urllib2, os, time
from plurk_oauth import PlurkAPI
from termcolor import colored
import subprocess

if sys.version_info >= (2, 7, 9):
  import ssl
  ssl._create_default_https_context = ssl._create_unverified_context

USER_HOME = os.path.expanduser('~')

try:
  rows, columns = os.popen('stty size', 'r').read().split()
except:
  now_time = time.strftime("%Y%m%d%H%M%S", time.gmtime())
  fsock = open(os.path.join(USER_HOME,'.plurk-cli', now_time), 'w')
  sys.stderr = fsock
  rows = 24
  columns = 80
LIMIT=20
CONFIG_PATH = os.path.join(USER_HOME,'.plurk-cli')
if not os.path.isdir(CONFIG_PATH):
  try:
    os.mkdir(CONFIG_PATH)
  except: 
    print 'Make configure path %s Faild' % CONFIG_PATH
    exit()
LAST_TIME_READ = os.path.join(CONFIG_PATH,'last_time_read')
plurk = PlurkAPI('XHYblwvESclp','fWojEnk17x15SFwVy3oAzCTDytvYEZ11')
authorize_file = os.path.join(CONFIG_PATH,'authorize_keys')
if not os.path.isfile(authorize_file):
  try:
    plurk.authorize()
    f = open(authorize_file,'w+')
    i = dict()
    i = plurk._oauth.oauth_token
    f.write(json.dumps(i))
  except:
    print 'there is something wrong when writing the config to %s.' % authorize_file
    exit()
else:
  try:
    f = open(authorize_file,'r')
    i = dict()
    i = json.loads(f.read())
    plurk.authorize(i['oauth_token'],i['oauth_token_secret'])
  except:
    print 'there is something wrong when reading the config to %s. Please remove it, and Try again.' % authorize_file
    exit()

def b36en(num):
  alphabet = [ chr(i) for i in ( range(48,58) + range(97,123) ) ]
  if (num == 0):
    return alphabet[0]
  arr = []
  base = len(alphabet)
  while num:
    rem = num % base
    num = num // base
    arr.append(alphabet[rem])
  arr.reverse()
  return ''.join(arr)


def main(argv):
  api = {
    'mute':   '/APP/Timeline/mutePlurks',
    'unmute': '/APP/Timeline/unmutePlurks',
    'favor':  '/APP/Timeline/favoritePlurks',
    'unfavor':'/APP/Timeline/unfavoritePlurks',
    'mar':    '/APP/Timeline/markAsRead'}
  if not argv:
    show_help()
  elif argv[0]=='add':
    add_plurk(argv[1:])
  elif argv[0] == 'get':
    data={'limit':LIMIT}
    if '--offset' in argv:
      try:
        offset = argv[argv.index('--offset')+1]
        test_time = time.strptime(offset,'%Y-%m-%dT%H:%M:%S')
      except:
        pass
      else:
        data['offset'] = offset
    if '--filter' in argv:
      filter_var = argv[argv.index('--filter')+1]
      if filter_var in ['only_user', 'only_responded', 'only_private', 'only_favorite']:
        data['filter'] = filter_var
      else:
        data['filter'] = None
    p = plurk.callAPI('/APP/Timeline/getPlurks',data)
    out_put(p)
  elif argv[0] in ['del', 'edit']:
    data = {'plurk_id':int(argv[1],36)}
    if argv[0] == 'del':
      p = plurk.callAPI('/APP/Timeline/plurkDelete',data)
    elif argv[0] == 'edit' and len(argv) == 3:
      data['content'] = argv[2]
      p = plurk.callAPI('/APP/Timeline/plurkEdit',data)
    else:
      print "there is something wrong in argvalues."
    if 'error_text' in p:
      print p['error_text']
    else:
      print 'OK!'
  elif argv[0] == 'resp':
    resp_group(argv[1:])
  elif argv[0] == 'count_unread':
    p = plurk.callAPI('/APP/Polling/getUnreadCount')
    data={'offset':get_last_unread_time(),'limit':20}
    np = plurk.callAPI('/APP/Polling/getPlurks',data)
    p['new'] = len(np['plurks'])
    print "New: %d All: %d My: %d Private: %d Responded: %d Favorite: %d" % \
          (p['new'],p['all'],p['my'],p['private'],p['responded'],p['favorite'])
  elif argv[0] == 'get_unread':
    data = {'limit': LIMIT}
    if set(['--new','-n']) & set(argv):
      get_last_timeLine_read()
    else:
      if set(['--my','-m']) & set(argv):
        data['filter'] = 'my'
      elif set(['--responded','-r']) & set(argv):
        data['filter'] = 'responded'
      elif set(['--private','-p']) & set(argv):
        data['filter'] = 'private'
      elif set(['--favorite','-f']) & set(argv):
        data['filter'] = 'favorite'
      p = plurk.callAPI('/APP/Timeline/getUnreadPlurks',data)
      rp = out_put(p)
      if rp['plurk_ids'] and '--withmar' in argv:
        plurk.callAPI('/APP/Timeline/markAsRead',{'ids':rp['plurk_ids'],'note_position':'true'})
  elif argv[0] in list(api.keys()):
    data = {'ids':[int(i) for i in argv[1:] if i.isdigit()]}
    if not data['ids']:
      print 'Please input Plurk id in integer not Base36.'
      exit()
    else:
      p = plurk.callAPI(api[argv[0]],data)
      if p['success_text'] != "ok":
        print "It's something wrong"
      else:
        print "OK!"
  elif argv[0] in ['replurk','unreplurk']:
    data = {'ids':[int(i) for i in argv[1:] if i.isdigit()]}
    if not data['ids']:
      print 'Please input Plurk id in integer not Base36.'
      exit()
    else:
      p = plurk.callAPI('/APP/Timeline/'+argv[0],data)
      for i, j in p['results'].items():
        if j['success']:
          print '%s %s success.' % (i, argv[0])
        else:
          print '%s %s error. %s' % (i, argv[0], j['error'])
  elif argv[0] == 'get_user_pub':
    data = dict()
    data['user_id'] = int(argv[1]) if argv[1][0] != '@' else argv[1][1:]
    data['limit']   = LIMIT
    if '--offset' in argv:
      try:
        offset = argv[argv.index('--offset')+1]
        test_time = time.strptime(offset,'%Y-%m-%dT%H:%M:%S')
      except:
        pass
      else:
        data['offset'] = offset
    p = plurk.callAPI('/APP/Timeline/getPublicPlurks',data)
    out_put(p)
  elif argv[0] == 'get_user_info':
    if argv[1:]:
      data={'user_id': int(argv[1]) if argv[1][0]!='@' else argv[1][1:]}
      p = plurk.callAPI('/APP/Profile/getPublicProfile',data)
    else:
      p = plurk.callAPI('/APP/Profile/getOwnProfile')
    print p
  elif argv[0] == 'clique':
    clique_group(argv[1:])
  elif argv[0] == 'alert':
    alert_group(argv[1:])
  elif argv[0] == 'block':
    block_group(argv[1:])
  elif argv[0] == '--npn':
    try:
      i = argv.index('--level')
      l = argv[i+1]
    except:
      l = 0
    new_plurk_notification(l)
  else:
    show_help()

def show_help():
  print """USAGE:    
    plurk add [qualifier] [content] [-p -nc -fc]
          get [--offset [time Type: YYYY-mm-ddTHH:MM:SS]] [--filter [only_user only_responded only_private only_favorite]]
          resp add [plurk_id] [qualifier] [content]
          resp get [plurk_id]
          resp del [plurk_id] [resp_id]
          count_unread
          get_unread [-n,--new -m,--my -r,--responded -p,--private -f,--favorite] [--withmar]
          del [plurk_id]
          edit [plurk_id] [content]
          mute [plurk_id#1 plurk_id#2 plurk_id#3 ...]
          unmute [plurk_id#1 plurk_id#2 plurk_id#3 ...]
          favor [plurk_id#1 plurk_id#2 plurk_id#3 ...]
          unfavor [plurk_id#1 plurk_id#2 plurk_id#3 ...]
          mar [plurk_id#1 plurk_id#2 plurk_id#3 ...]
          replurk [plurk_id#1 plurk_id#2 plurk_id#3 ...]
          unreplurk [plurk_id#1 plurk_id#2 plurk_id#3 ...]
          get_user_pub [user_id]
          get_user_info clique block alert, ... etc.

* readmore on doc. Or call the `man plurk`"""


def sendmessage(m):
  subprocess.Popen(['notify-send', '-i', m[0], m[1], m[2]])
  return

def new_plurk_notification(level=0):
  while 1:
    try:
      comet = plurk.callAPI('/APP/Realtime/getUserChannel')
      pui   = plurk.callAPI('/APP/Users/currUser')
      urc   = plurk.callAPI('/APP/Polling/getUnreadCount')
      break
    except:
      time.sleep(5)
  pp = os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)),'../lib/plurk'))
  uri = pp +"/plurk-icon.png"
  aur = urc.pop('all')
  t = 'Plurk Notification Working...'
  c = [str(j)+' '+i for i,j in urc.iteritems() if j]
  c = u'Hello! %s. You have %s unread plurk%s.' % (pui['nick_name'], aur, (', '+', '.join(c)) if c else '')
  while 1:
    try:
      n = [uri, t, c.encode('UTF-8')]
      sendmessage(n)
      break
    except:
      time.sleep(3)
  comet_channel = comet['comet_server'][:comet['comet_server'].index('?')] + "?offset=%d&channel=%s"
  cn = comet['channel_name']
  jsonp_re = re.compile('CometChannel.scriptCallback\((.+)\);\s*');
  new_offset = -1
  #print comet_channel % (new_offset,cn)
  while 1:
    while 1:
      try:
        req = urllib2.urlopen(comet_channel % (new_offset,cn), timeout=50)
        break
      except:
        time.sleep(3)
    rawdata = req.read()
    match = jsonp_re.match(rawdata)
    if match:
      rawdata = match.group(1)
    data = json.loads(rawdata)
    msgs = data.get('data')
    new_offset = data.get('new_offset', -1)
    if not msgs:
      continue
    for msg in msgs:
      t = None
      data = {'plurk_id':int(msg['plurk_id']),'replurkers_detail':1}
      while 1:
        try:
          p = plurk.callAPI('/APP/Timeline/getPlurk',data)
          break
        except:
          time.sleep(3)
      if msg['type']=='new_plurk' :
        u = p['plurk_users'][str(msg['user_id'])]
        m = u.get('display_name') if u.get('display_name') else u.get('nick_name')
        if msg.get('replurker_id'):
          ru = p['plurk_users'][str(msg['replurker_id'])]
          rm = ru.get('display_name') if ru.get('display_name') else ru.get('nick_name')
          m = u'%s %s %s' % (rm,'replurk', m)
        q = p['plurk']['qualifier_translated'] if p['plurk'].get('qualifier_translated') else msg['qualifier']
        c = u'%s %s %s \n https://www.plurk.com/p/%s' % (m , q, msg['content_raw'], b36en(int(msg['plurk_id'])))
        t = 'New Plurk'
      elif msg['type'] == 'new_response' and level:
        if msg['plurk'].get('owner_id') == pui['id']:
          t = 'New Respond to your Plurk'
          q = p['plurk']['qualifier_translated'] if p['plurk'].get('qualifier_translated') else msg['plurk']['qualifier']
          c = u'%s %s %s %s %s' % (q, msg['plurk']['content_raw'], 
                                msg['user'][str(msg['response']['user_id'])]['nick_name'], 
                                msg['response']['qualifier'], msg['response']['content_raw'])
        elif level > 1:
          q = p['plurk']['qualifier_translated'] if p['plurk'].get('qualifier_translated') else msg['plurk']['qualifier']
          t = 'New Respond to %s %s %s' % (p['plurk_users'][str(p['plurk']['owner_id'])]['nick_name'], q, msg['plurk']['content_raw'])
          u = p['plurk_users'][str(msg['plurk']['user_id'])]['nick_name'] if str(msg['plurk']['user_id']) in p['plurk_users'] else msg['user'][str(msg['plurk']['user_id'])]['nick_name']
          c = u'%s %s %s' % (msg['user'][str(msg['response']['user_id'])]['nick_name'], 
                             msg['response']['qualifier'], msg['response']['content_raw'])
      if p:
        print new_offset, msg['plurk_id'], p['plurk']['is_unread'], msg['type']
      if t:
        while 1:
          try:
            n = [uri, t, c.encode('UTF-8')]
            sendmessage(n)
            break
          except:
            time.sleep(3)


def clique_group(argv):
  if argv[0] == 'list':
    p = plurk.callAPI('/APP/Cliques/getCliques')
    for i in  p:
      print i
  elif argv[0] == 'user' and len(argv) == 2 :
    data = {'clique_name': argv[1] }
    p = cli_u(data)
    for i in p['id']:
      j = p['id'].index(i)
      m = u'%s (@%s)' % (p['display_name'][j],p['nick_name'][j])
      print m.encode('UTF-8')
  elif argv[0] == 'create' and len(argv) == 2 :
    data = {'clique_name': argv[1] }
    p = plurk.callAPI('/APP/Cliques/createClique',data)
    if 'success_text' in p:
      print 'OK!'
    else:
      print 'Error!'
  elif argv[0] == 'mv' and len(argv) == 3 :
    data = {'clique_name': argv[1], 'new_name':argv[2] }
    p = plurk.callAPI('/APP/Cliques/renameClique',data)
    if 'success_text' in p:
      print 'OK!'
    else:
      print 'Error!'
  elif argv[0] == 'add' and len(argv) > 2 :
    for i in argv[2:]:
      m = guid(i)
      if m > 0:
        data = {'clique_name': argv[1], 'user_id': m}
        p = plurk.callAPI('/APP/Cliques/add',data)
        n = (i,argv[1])
      else:
        p = {'error':''}
      if 'success_text' in p:
        print '%s add to %s OK!' % n
      else:
        print '%s add to %s error!' % n
  elif argv[0] == 'rm' and len(argv) > 2 :
    for i in argv[2:]:
      m = guid(i)
      if m:
        data = {'clique_name': argv[1], 'user_id':m }
        p = plurk.callAPI('/APP/Cliques/remove',data)
        n = (i,argv[1])
      else:
        p = {'error':''}
      if 'success_text' in p:
        print '%s add to %s OK!' % n
      else:
        print '%s add to %s error!' % n
  else:
    show_help()


friendsfans = {}
def guid(i):
  global friendsfans
  if not len(friendsfans):
    friendsfans = plurk.callAPI('/APP/FriendsFans/getCompletion')
  m = [int(j) for j, k in friendsfans.iteritems() if k['nick_name'] == i]
  return m[0] if len(m) else None


def block_group(argv):
  if argv[0] == 'list':
    try:
      off = (int(argv[1])-1)*10
      data = {'offset': off }
    except:
      off = 0
      data = {}
    p = plurk.callAPI('/APP/Blocks/get',data)
    j=0
    for i in p['users']:
      print i['id'], i['display_name'] if i.get('display_name') else i['nick_name']
      j+=1
    print 'From %d to %d Total: %d' % (off+1, off+j, p['total'])
  elif argv[0] == 'add' and len(argv) > 1:
    for i in argv[1:]:
      data = {'user_id':i }
      p = plurk.callAPI('/APP/Blocks/block',data)
      print p
  elif argv[0] == 'rm' and len(argv) > 1:
    for i in argv[1:]:
      data = {'user_id':i }
      p = plurk.callAPI('/APP/Blocks/unblock',data)
      print p
  else:
    show_help()


def resp_group(argv):
  if argv[0] == 'add':
    add_resp(argv[1:])
  elif argv[0] == 'get':
    get_resp(argv[1:])
  elif argv[0] == 'del':
    data = {'plurk_id': int(argv[1], 36),'response_id':int(argv[2],36)}
    p = plurk.callAPI('/APP/Responses/responseDelete',data)
    if 'error_text' in p:
      print 'ERROR! %s.' % p['error_text']
    else:
      print 'Success!'


def cli_u(data):
  p = plurk.callAPI('/APP/Cliques/getClique',data)
  u = {'id':[],'display_name':[],'nick_name':[]}
  for i in p:
    u['id'].append(int(i['id']))
    u['nick_name'].append(i['nick_name'])
    u['display_name'].append(i['display_name'] if 'display_name' in i else i['nick_name'])
  return u

def alert_group(argv):
  p=plurk.callAPI('/APP/Alerts/getActive')
  api_mg = {
        'afn':{
                'url':'/APP/Alerts/addAsFan',
                'm': u'%s add as fan'
              },
        'afd':{
                'url':'/APP/Alerts/addAsFriend',
                'm': u'%s add as friend'
              },
        'dfs':{
                'url':'/APP/Alerts/denyFriendship',
                'm': u'deny %s as friendship'
              },
        'rnf':{
                'url':'/APP/Alerts/removeNotification',
                'm': u'remove %s Notification'
              }
      }
  if not len(argv) < 1:
    k = argv.pop(0)
    if k == 'history':
      p=plurk.callAPI('/APP/Alerts/getHistory')
      for i in p:
        n = i[i['type']]['nick_name']
        m = u'%s become %s' % (n, i['type'].replace('_',' '))
        print m.encode('UTF-8')
    elif k in api_mg and len(argv):
      for j in argv:
        data = {'user_id': i['from_user']['id'] for i in p if i['from_user']['nick_name']==j } 
        p=plurk.callAPI(api_mg[k]['url'],data)
        if 'success_text' in p:
          m = api_mg[k]['m'] % j
          print m.encode('UTF-8')
        else:
          print 'Something Wrong!'
    elif k in ['allfn','allfd']:
      l = '/APP/Alerts/addAllAsFan' if k == 'allfn' else '/APP/Alerts/addAllAsFriends'
      p = plurk.callAPI(l)
      if 'success_text' in p:
        print 'All become %s' % 'Fan' if k=='allfn' else 'Friend'
      else:
        print 'Something Wrong!'
  else:
    if p:
      for i in p:
        if i['type'] == 'friendship_request':
          m = u'%s (@%s) send a friendship request.' % (i['from_user']['full_name'],i['from_user']['nick_name'])
          print m.encode('UTF-8')
    else:
      print 'There is nothing Notification'


def add_plurk(argv):
  data = {'content':argv[1],'qualifier':argv[0],'lang':'tr_ch','limit': LIMIT}
  if '-p' in argv:
    data['limited_to'] = []
    for i in argv[argv.index('-p')+1:]:
      if i[0]=='-':
        break
      elif i[0] == '@':
        j = guid(i[1:])
        if not j:
          q = plurk.callAPI('/APP/Profile/getPublicProfile',{'user_id':i[1:]})
          j = q['user_info']['id']
        data['limited_to'].extend([j])
      elif i[0] == ':' :
        cli = {'clique_name': i[1:]}
        cu = cli_u(cli)
        data['limited_to'].extend(cu['id'])
      elif i.isdigit():
        data['limited_to'].append(int(i))
  elif '-pf' in argv:
    data['limited_to'] = [0]
  if '-nc' in argv:
    data['no_comments'] = 1
  elif '-fc' in argv:
    data['no_comments'] = 2
  p = plurk.callAPI('/APP/Timeline/plurkAdd',data)
  if not 'error_text' in p:
    print 'url: https://www.plurk.com/p/'+b36en(p['plurk_id']) + ' plurk_id: '+ b36en(p['plurk_id'])
  else:
    print p['error_text']


def get_last_unread_time():
  if not os.path.isfile(LAST_TIME_READ):
    f = open(LAST_TIME_READ,'w+')
    f.close()
  f = open(LAST_TIME_READ,'r+')
  last_time = f.read()
  f.close()
  if not last_time:
    last_time = time.strftime('%Y-%m-%dT%H:%M:%S',time.gmtime())
  try:
    a = time.strptime(last_time,'%a, %d %b %Y %H:%M:%S %Z')
  except:
    pass
  else:
    last_time = time.strftime('%Y-%m-%dT%H:%M:%S',a)
  return last_time


def get_last_timeLine_read():
  last_time = get_last_unread_time()
  data={'offset':last_time,'limit':LIMIT}
  p = plurk.callAPI('/APP/Polling/getPlurks',data)
  rp = out_put(p)
  last_time = rp['last_time'] if rp['last_time'] else last_time
  f = open(LAST_TIME_READ,'w+')
  f.write(last_time)
  f.close()


def out_put(p):
  last_time=None
  first_time = None
  plurk_ids = []
  print '-'*int(columns)
  for h, i in enumerate(reversed(p['plurks'])):
    out_put_plurk(i,p['plurk_users'])
    print '-'*int(columns)
    if h == 0:
      first_time = i['posted']
    last_time = i['posted']
    plurk_ids = plurk_ids + [i['plurk_id']]
  if first_time != None and last_time != None:
    print first_time
    first_time = time.strptime(first_time,'%a, %d %b %Y %H:%M:%S %Z')
    last_time  = time.strptime(last_time ,'%a, %d %b %Y %H:%M:%S %Z')
    first_time = time.strftime('%Y-%m-%dT%H:%M:%S',first_time)
    last_time  = time.strftime('%Y-%m-%dT%H:%M:%S',last_time)
    print 'Offset From: %s End: %s' % (first_time,last_time)
  return {'last_time':last_time,'first_time':first_time,'plurk_ids':plurk_ids}


def out_put_plurk(i,p):
  if not 'qualifier_translated' in i:
    i['qualifier_translated'] = None
  qu = qualifier_color( i['qualifier'], i['qualifier_translated'])
  plurk_uname = user_coloer(p[str(i['owner_id'])])
  if 'replurker_id' in i and i['replurker_id'] and int(i['replurker_id']):
    replurk_uname = user_coloer(p[str(i['replurker_id'])])
    ma = u'%s %s %s %s' % ( replurk_uname, qualifier_color('replurk'), plurk_uname, qu)
  else:
    ma = u'%s %s' % (plurk_uname, qu)
  print ma.encode("utf-8")
  print content_formater(i['content_raw']).encode("utf-8")
  l = str(i['response_count'])+ ' response(s)' if i['response_count'] else 'no response'
  k = colored(l,'white','on_red') if i['is_unread'] == 1 else l
  m = 'plurk_id: '+b36en(i['plurk_id'])
  j = {'c':{},'uc':{}}
  if 'favorite' in i and i['favorite']:
    j['uc']['f'] = ' F '
    j['c']['f']  = colored(j['uc']['f'],'grey','on_cyan', attrs=['dark'])
  if 'replurked' in i and i['replurked']:
    j['uc']['r'] = ' R '
    j['c']['r']  = colored(j['uc']['r'],'grey','on_green', attrs=['dark'])
  if (int(i['plurk_type']) | 2) is 3:
    j['uc']['p'] = ' P '
    j['c']['p']  = colored(j['uc']['p'],'grey','on_yellow', attrs=['dark'])
  if int(i['is_unread']) is 2:
    j['uc']['m'] = ' M '
    j['c']['m']  = colored(j['uc']['m'],'grey','on_white', attrs=['dark'])
  print ' '*(int(columns)-len(' '.join(list(j['uc'].values())+[l,m]))) + ' '.join(list(j['c'].values())+[k,m])


def out_put_resp(p):
  for i in p['responses']:
    if not 'qualifier_translated' in i:
      i['qualifier_translated'] = None
    qu = qualifier_color( i['qualifier'], i['qualifier_translated'])
    plurk_uname = user_coloer(p['friends'][str(i['user_id'])])
    content = content_formater(i['content_raw'])
    m =  u'%s %s %s' % (plurk_uname, qu, content)
    print m.encode("utf-8")
    j = 'respond_id: '+b36en(i['id'])
    print ' '*(int(columns)-len(j)) + j
    print '-'*int(columns)
  print 'Total: %d response(s)' % len(p['responses'])


def content_formater(text): ##need modify, too dirty.
  l = text.split('**')
  k = len(l)
  f_text = []
  for i,j in enumerate(l):
    if i % 2 :
      if i < (k-1):
        f_text = f_text + [ colored(j,attrs=['bold']) ]
      else:
        f_text = f_text + [ '**' + j ]
    else:
      f_text = f_text + [ j ]
  l = ''.join(f_text).split('__')
  k = len(l)
  g_text = []
  for i,j in enumerate(l):
    if i % 2 :
      if i < (k-1):
        g_text = g_text + [ colored(j,attrs=['underline']) ]
      else:
        g_text = g_text + [ '__' + j ]
    else:
      g_text = g_text + [ j ]
  #print colored('test','grey','on_grey',attrs=['dark','reverse'])
  return ''.join(g_text)

def user_coloer(plurk_user):
  plurk_uname = plurk_user['display_name'] if plurk_user.get('display_name') else plurk_user['nick_name']
  plurk_uname = plurk_uname + '(@%s)' % plurk_user['nick_name']
  if not 'name_color' in plurk_user:
    plurk_user['name_color'] = None
  if plurk_user['name_color'] == '0A9C17':
    plurk_uname = colored(plurk_uname, 'green', attrs=['bold'])
  elif plurk_user['name_color'] == '2264D6':
    plurk_uname = colored(plurk_uname, 'blue', attrs=['bold'])
  elif plurk_user['name_color'] == 'E41227':
    plurk_uname = colored(plurk_uname, 'red', attrs=['bold'])
  else:
    plurk_uname = colored(plurk_uname, attrs=['bold'])
  return plurk_uname


def qualifier_color(qu,qu_tr=None):
  if qu in ['loves', 'likes', 'shares', 'gives', 'says', 'is', 'plays', 'buys', 'sells', 'eats', 'writes']:
    bg = 'on_red'
  elif qu in ['hates', 'has', 'was', ':', 'freestyle']:
    bg = 'on_grey'
  elif qu in ['wants', 'wishes', 'needs', 'replurk']:
    bg = 'on_green'
  elif qu in ['will', 'hopes', 'asks']:
    bg = 'on_magenta'
  elif qu in ['wonders']:
    bg = 'on_cyan'
  elif qu in ['feels', 'thinks', 'whispers']:
    bg = 'on_blue'
  if not qu_tr:
    qu_tr = qu
  return colored(qu_tr, 'white', bg)


def add_resp(argv):
  data=dict()
  data['plurk_id']=int(argv[0], 36)
  data['qualifier']=argv[1]
  data['content'] =argv[2]
  p = plurk.callAPI('/APP/Responses/responseAdd',data)
  print 'respond id: %s' % b36en(p['id'])


def get_resp(argv):
  p = plurk.callAPI('/APP/Timeline/getPlurk',{'plurk_id':int(argv[0],36)})
  print '='*int(columns)
  out_put_plurk(p['plurk'],p['plurk_users'])
  print '='*int(columns)
  p = plurk.callAPI('/APP/Responses/get',{'plurk_id':int(argv[0],36)})
  out_put_resp(p)


if __name__ == '__main__':
  main(sys.argv[1:])
