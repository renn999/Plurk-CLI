#!/usr/bin/env python

import sys, json
from plurk_oauth.PlurkAPI import PlurkAPI
import os,time
rows, columns = os.popen('stty size', 'r').read().split()
LIMIT=30
USER_HOME=os.path.expanduser('~')
CONFIG_PATH = os.path.join(USER_HOME,'.plurk-cli')
if not os.path.isdir(CONFIG_PATH):
  try:
    os.mkdir(CONFIG_PATH)
  except:
    print 'Make configure path %s Faild' % CONFIG_PATH
    exit()
LAST_TIME_READ = os.path.join(CONFIG_PATH,'last_time_read')
consumer_file = os.path.join(CONFIG_PATH,'consumer_keys')
if not os.path.isfile(consumer_file):
  try:
    f = open(consumer_file,'w+')
    i = dict()
    i['consumer_key'] = raw_input('Consumer Key: ')
    i['consumer_secret'] = raw_input('Consumer Secret: ')
    f.write(json.dumps(i))
  except:
    print 'there is something wrong when writing the config to %s.' % consumer_file
    exit()
else:
  try:
    f = open(consumer_file,'r')
    i = json.loads(f.read())
  except:
    print 'there is something wrong when reading the config to %s.' % consumer_file
    exit()
authorize_file = os.path.join(CONFIG_PATH,'authorize_keys')
plurk = PlurkAPI(i['consumer_key'],i['consumer_secret'])
if not os.path.isfile(authorize_file):
  try:
    plurk.authorize()
    #plurk.authorize()
    f = open(authorize_file,'w+')
    i = dict()
    i = plurk._oauth.oauth_token
    f.write(json.dumps(i))
  except:
    print 'there is something wrong when writing the config to %s.' % authorize_file
    exit()
else:
  try:
    f = open(authorize_file,'r')
    i = dict()
    i = json.loads(f.read())
    plurk.authorize(i['oauth_token'],i['oauth_token_secret'])
  except:
    print 'there is something wrong when reading the config to %s.' % authorize_file
    exit()



def b36en(num):
  alphabet = [ chr(i) for i in ( range(48,58) + range(97,123) ) ]
  if (num == 0):
    return alphabet[0]
  arr = []
  base = len(alphabet)
  while num:
    rem = num % base
    num = num // base
    arr.append(alphabet[rem])
  arr.reverse()
  return ''.join(arr)

def main(argv):
  if argv[0]=='add':
    add_plurk(argv[1:])
  elif argv[0] == 'get':
    data={'limit':LIMIT}
    if '--limit' in argv:
      try:
        limit = int(argv[argv.index('--limit')+1])
      except:
        pass
      else:
        data['limit'] = limit
    p = plurk.callAPI('/APP/Timeline/getPlurks',data)
    out_put(p)
  elif argv[0] == 'resp_add':
    add_resp(argv[1:])
  elif argv[0] == 'resp_get':
    get_resp(argv[1:])
  elif argv[0] == 'get_unread_count':
    p = plurk.callAPI('/APP/Polling/getUnreadCount')
    f = open(LAST_TIME_READ,'r+')
    last_time = f.read()
    f.close()
    a = time.strptime(last_time,'%a, %d %b %Y %H:%M:%S %Z')
    data={'offset':time.strftime('%Y-%m-%dT%H:%M:%S',a)}
    np = plurk.callAPI('/APP/Polling/getPlurks',data)
    p['new'] = len(np['plurks'])
    print "New: %d All: %d My: %d Private: %d Responded: %d Favorite: %d" % (p['new'],p['all'],p['my'],p['private'],p['responded'],p['favorite'])
  elif argv[0] == 'get_unread':
    data = {'limit': LIMIT}
    if '--new' in argv:
      get_last_timeLine_read()
    else:
      if '--my' in argv:
        data['filter'] = 'my'
      elif '--responded' in argv:
        data['filter'] = 'responded'
      elif '--private' in argv:
        data['filter'] = 'private'
      elif '--favorite' in argv:
        data['filter'] = 'favorite'
      p = plurk.callAPI('/APP/Timeline/getUnreadPlurks',data)
      rp = out_put(p)
      if rp['plurk_ids'] and '--withmar' in argv:
        plurk.callAPI('/APP/Timeline/markAsRead',{'ids':rp['plurk_ids']})


def add_plurk(argv):
  data = {'content':argv[1],'qualifier':argv[0],'lang':'tr_ch','limit': LIMIT}
  if '-p' in argv:
    data['limited_to'] = [0]
  if '-nc' in argv:
    data['no_comments'] = 1
  elif '-fc' in argv:
    data['no_comments'] = 2
  p = plurk.callAPI('/APP/Timeline/plurkAdd',data)
  if not p.has_key('error_text'):
    print 'url: http://www.plurk.com/p/'+b36en(p['plurk_id']) + '\nplurk_id: '+ str(p['plurk_id'])
  else:
    print p['error_text']


def get_last_timeLine_read():
  f = open(LAST_TIME_READ,'r+')
  last_time = f.read()
  f.close()
  try:
    a = time.strptime(last_time,'%a, %d %b %Y %H:%M:%S %Z')
  except:
    last_time = time.strftime('%a, %d %b %Y %H:%M:%S %Z')
    a = time.strptime(last_time,'%a, %d %b %Y %H:%M:%S %Z')
  data={'offset':time.strftime('%Y-%m-%dT%H:%M:%S',a),'limit':LIMIT}
  p = plurk.callAPI('/APP/Polling/getPlurks',data)
  rp = out_put(p)
  last_time = rp['last_time'] if rp['last_time'] else last_time
  f = open(LAST_TIME_READ,'w+')
  f.write(last_time)
  f.close()


def out_put(p):
  last_time=None
  plurk_ids = []
  print '-'*int(columns)
  for i in reversed(p['plurks']):
    qu = i['qualifier_translated'] if i.has_key('qualifier_translated') else i['qualifier']
    if i.has_key('replurker_id') and i['replurker_id']:
      print p['plurk_users'][str(i['replurker_id'])]['display_name'] + ' replurk '+ p['plurk_users'][str(i['owner_id'])]['display_name'] + qu
    else:
      print p['plurk_users'][str(i['owner_id'])]['display_name']+' ' + qu
    print i['content_raw']
    j = (str(i['response_count'])+ ' response(s) ' if i['response_count'] else 'no response ' ) +'plurk_id: '+str(i['plurk_id'])
    if (int(i['plurk_type']) | 2) is 3:
      j = 'P ' + j
    if int(i['is_unread']) is 2:
      j = 'M ' + j
    print ' '*(int(columns)-len(j)) + j
    print '-'*int(columns)
    last_time=i['posted']
    plurk_ids = plurk_ids + [i['plurk_id']]
  print 'Total: %d plurks' % len(p['plurks'])
  return {'last_time':last_time,'plurk_ids':plurk_ids}


def out_put_single(p):
  print '='*int(columns)
  i=p['plurk']
  qu = i['qualifier_translated'] if i.has_key('qualifier_translated') else i['qualifier']
  if i.has_key('replurker_id') and i['replurker_id']:
    print p['plurk_users'][str(i['replurker_id'])]['display_name'] + ' replurk '+ p['plurk_users'][str(i['owner_id'])]['display_name'] + qu
  else:
    print p['plurk_users'][str(i['owner_id'])]['display_name']+' ' + qu
  print i['content_raw']
  j = (str(i['response_count'])+ ' response(s) ' if i['response_count'] else 'no response ' ) +'plurk_id: '+str(i['plurk_id'])
  print ' '*(int(columns)-len(j)) + j
  print '='*int(columns)


def out_put_resp(p):
  for i in p['responses']:
    qu = i['qualifier_translated'] if i.has_key('qualifier_translated') else i['qualifier']
    print p['friends'][str(i['user_id'])]['display_name']+' ' + qu
    print i['content_raw']
    j = 'respond_id: '+str(i['id'])
    print ' '*(int(columns)-len(j)) + j
    print '-'*int(columns)
  print 'Total: %d response(s)' % len(p['responses'])


def add_resp(argv):
  data=dict()
  data['plurk_id']=int(argv[0])
  data['qualifier']=argv[1]
  data['content'] =argv[2]
  p = plurk.callAPI('/APP/Responses/responseAdd',data)
  print 'respond id: %d' % p['id']


def get_resp(argv):
  p = plurk.callAPI('/APP/Timeline/getPlurk',{'plurk_id':argv[0]})
  out_put_single(p)
  p = plurk.callAPI('/APP/Responses/get',{'plurk_id':argv[0]})
  out_put_resp(p)


if __name__ == '__main__':
  main(sys.argv[1:])
